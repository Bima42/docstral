// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateChatChatsPostData, CreateChatChatsPostErrors, CreateChatChatsPostResponses, GetChatChatChatIdGetData, GetChatChatChatIdGetErrors, GetChatChatChatIdGetResponses, HealthHealthGetData, HealthHealthGetResponses, ListChatsChatsGetData, ListChatsChatsGetErrors, ListChatsChatsGetResponses, StreamReplyChatChatIdStreamPostData, StreamReplyChatChatIdStreamPostErrors, StreamReplyChatChatIdStreamPostResponses, VerifyTokenAuthVerifyPostData, VerifyTokenAuthVerifyPostResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health check
 */
export const healthHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthHealthGetData, ThrowOnError>) => {
	return (options?.client ?? client).get<HealthHealthGetResponses, unknown, ThrowOnError>({
		url: '/health',
		...options
	});
};

/**
 * List chats
 */
export const listChatsChatsGet = <ThrowOnError extends boolean = false>(options?: Options<ListChatsChatsGetData, ThrowOnError>) => {
	return (options?.client ?? client).get<ListChatsChatsGetResponses, ListChatsChatsGetErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/chats',
		...options
	});
};

/**
 * Create a new chat
 */
export const createChatChatsPost = <ThrowOnError extends boolean = false>(options: Options<CreateChatChatsPostData, ThrowOnError>) => {
	return (options.client ?? client).post<CreateChatChatsPostResponses, CreateChatChatsPostErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/chats',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get a chat by ID
 */
export const getChatChatChatIdGet = <ThrowOnError extends boolean = false>(options: Options<GetChatChatChatIdGetData, ThrowOnError>) => {
	return (options.client ?? client).get<GetChatChatChatIdGetResponses, GetChatChatChatIdGetErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/chat/{chat_id}',
		...options
	});
};

/**
 * Stream an assistant reply to a user message (SSE)
 */
export const streamReplyChatChatIdStreamPost = <ThrowOnError extends boolean = false>(options: Options<StreamReplyChatChatIdStreamPostData, ThrowOnError>) => {
	return (options.client ?? client).post<StreamReplyChatChatIdStreamPostResponses, StreamReplyChatChatIdStreamPostErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/chat/{chat_id}/stream',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify token and return the current user
 */
export const verifyTokenAuthVerifyPost = <ThrowOnError extends boolean = false>(options?: Options<VerifyTokenAuthVerifyPostData, ThrowOnError>) => {
	return (options?.client ?? client).post<VerifyTokenAuthVerifyPostResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/auth/verify',
		...options
	});
};
