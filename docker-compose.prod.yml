volumes:
  postgres_data:
  redis_data:

services:
  db:
    image: postgres:17-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DOCSTRAL_DB_USER}
      POSTGRES_PASSWORD: ${DOCSTRAL_DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-docstral}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    env_file:
      - .env
    networks:
      - docstral_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - docstral_network
    restart: unless-stopped

  server:
    build:
      context: .
      dockerfile: docker/prod/server/Dockerfile
    environment:
      APP_ENV: production
      DOCSTRAL_MISTRAL_API_KEY: ${DOCSTRAL_MISTRAL_API_KEY}
      DOCSTRAL_DB_USER: ${DOCSTRAL_DB_USER}
      DOCSTRAL_DB_PASSWORD: ${DOCSTRAL_DB_PASSWORD}
    volumes:
      - /home/ubuntu/docstral_data:/app/server/scraper/data
    networks:
      - docstral_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  client:
    build:
      context: .
      dockerfile: docker/prod/client/Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL}
        VITE_VERSION: ${VITE_VERSION}
    networks:
      - docstral_network
    restart: unless-stopped

networks:
  docstral_network: